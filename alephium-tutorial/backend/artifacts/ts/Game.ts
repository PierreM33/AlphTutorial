/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as GameContractJson } from "../Game.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace GameTypes {
  export type State = Omit<ContractState<any>, "fields">;
  export type GamePlayedEvent = ContractEvent<{
    player: Address;
    playerChoice: bigint;
    contractChoice: bigint;
    betAmount: bigint;
    won: boolean;
  }>;

  export interface CallMethodTable {
    getContractChoice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    play: {
      params: CallContractParams<{ playerChoice: bigint; betAmount: bigint }>;
      result: CallContractResult<null>;
    };
    retrieveGameBalance: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getContractChoice: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    play: {
      params: SignExecuteContractMethodParams<{
        playerChoice: bigint;
        betAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    retrieveGameBalance: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<GameInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, []);
  }

  eventIndex = { GamePlayed: 0 };
  consts = {
    Choices: { Rock: BigInt("0"), Paper: BigInt("1"), Scissors: BigInt("2") },
    ErrorCodes: {
      InvalidChoice: BigInt("0"),
      InsufficientBet: BigInt("1"),
      InsufficientFunds: BigInt("2"),
      Unauthorized: BigInt("3"),
    },
  };

  at(address: string): GameInstance {
    return new GameInstance(address);
  }

  tests = {
    getContractChoice: async (
      params?: Omit<
        TestContractParamsWithoutMaps<never, never>,
        "testArgs" | "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getContractChoice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    play: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { playerChoice: bigint; betAmount: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "play", params, getContractByCodeHash);
    },
    retrieveGameBalance: async (
      params?: Omit<
        TestContractParamsWithoutMaps<never, never>,
        "testArgs" | "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "retrieveGameBalance",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(initFields: {}, asset?: Asset, address?: string) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const Game = new Factory(
  Contract.fromJson(
    GameContractJson,
    "",
    "4210fe845daeede0c8495e32470122f07b142fc6ed597308739243aafcb8d82a",
    []
  )
);
registerContract(Game);

// Use this class to interact with the blockchain
export class GameInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<GameTypes.State> {
    return fetchContractState(Game, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeGamePlayedEvent(
    options: EventSubscribeOptions<GameTypes.GamePlayedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Game.contract,
      this,
      options,
      "GamePlayed",
      fromCount
    );
  }

  view = {
    getContractChoice: async (
      params?: GameTypes.CallMethodParams<"getContractChoice">
    ): Promise<GameTypes.CallMethodResult<"getContractChoice">> => {
      return callMethod(
        Game,
        this,
        "getContractChoice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    play: async (
      params: GameTypes.CallMethodParams<"play">
    ): Promise<GameTypes.CallMethodResult<"play">> => {
      return callMethod(Game, this, "play", params, getContractByCodeHash);
    },
    retrieveGameBalance: async (
      params?: GameTypes.CallMethodParams<"retrieveGameBalance">
    ): Promise<GameTypes.CallMethodResult<"retrieveGameBalance">> => {
      return callMethod(
        Game,
        this,
        "retrieveGameBalance",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getContractChoice: async (
      params: GameTypes.SignExecuteMethodParams<"getContractChoice">
    ): Promise<GameTypes.SignExecuteMethodResult<"getContractChoice">> => {
      return signExecuteMethod(Game, this, "getContractChoice", params);
    },
    play: async (
      params: GameTypes.SignExecuteMethodParams<"play">
    ): Promise<GameTypes.SignExecuteMethodResult<"play">> => {
      return signExecuteMethod(Game, this, "play", params);
    },
    retrieveGameBalance: async (
      params: GameTypes.SignExecuteMethodParams<"retrieveGameBalance">
    ): Promise<GameTypes.SignExecuteMethodResult<"retrieveGameBalance">> => {
      return signExecuteMethod(Game, this, "retrieveGameBalance", params);
    },
  };

  async multicall<Calls extends GameTypes.MultiCallParams>(
    calls: Calls
  ): Promise<GameTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends GameTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<GameTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends GameTypes.MultiCallParams | GameTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(Game, this, callss, getContractByCodeHash);
  }
}
